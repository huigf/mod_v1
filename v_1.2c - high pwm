#include <LiquidCrystal.h>
LiquidCrystal lcd(12, 11, 5 , 4, 3, 2);
#include <EEPROM.h>
int fire = 8;            //
int b_up = 7;            //   Przyciski
int b_down = 6;          //
int przerwanie = 9;

float b1;                //   Bateria
float b2;                //   Bateria
float vbatt = 8.4;       //   Bateria

float min_vbatt = 3.30;  //   Napiecie odciecia grzalki

float coilr = 1.00;      // resystancja grzoły

int max_watts = 0;       //    max ilos watow
float set_watts = 0;     //   Regulacja Watow

int prc;                 //
int pwm;                 //   Przeksztalcanie na pwm
#define fire_pwm 10      //                    

int bck = 0;
int i = 0;               //menu    //menu glowne
int blc = 0;             //menu
int blc2 = 0;            //wyborow

float vape;
 
byte lck[8] = {
  0b00000,
  0b01110,
  0b01010,
  0b01010,
  0b11111,
  0b11111,
  0b11111,
  0b11111
};
byte opn[8] = {
  0b00000,
  0b01110,
  0b01010,
  0b01000,
  0b11111,
  0b11111,
  0b11111,
  0b11111
};
byte Right[8] = {
  0b00000,
  0b01000,
  0b01100,
  0b01110,
  0b01110,
  0b01100,
  0b01000,
  0b00000
};
byte Left[8] = {
  0b00000,
  0b00010,
  0b00110,
  0b01110,
  0b01110,
  0b00110,
  0b00010,
  0b00000
};
byte ohm[8] = {
  0b00000,
  0b01110,
  0b10001,
  0b10001,
  0b10001,
  0b01010,
  0b11011,
  0b00000
};
byte batt[8] = {
  0b01110,
  0b11011,
  0b10001,
  0b10001,
  0b10001,
  0b10001,
  0b10001,
  0b11111
};

void setup() {                    // setup
  lcd.begin(16, 2);
  lcd.clear();  

  lcd.createChar(1, lck);
  lcd.createChar(2, opn); 
  lcd.createChar(3, Left);
  lcd.createChar(4, Right);
  lcd.createChar(5, ohm);
  lcd.createChar(6, batt);
 
  pinMode(fire_pwm, OUTPUT);
  pinMode(fire, INPUT);
  pinMode(b_up, INPUT);
  pinMode(b_down, INPUT);
  pinMode(przerwanie, INPUT);

  TCCR1B = TCCR1B & B11111000 | B00000001;
}

void zmienne() {
  int sensorValue1 = analogRead(A0);
  float b1 = sensorValue1 * (5.0 / 1023.0);
  int sensorValue2 = analogRead(A1);
  float b2 = sensorValue2 * (5.0 / 1023.0);
  //vbatt = b1;
  max_watts = pow(vbatt,2) / coilr;
  pwm = map(set_watts, 0,max_watts, 0, 255);
}

void VW() {
  while (true) {
    if (max_watts < set_watts) {
      set_watts--;
    }
    zmienne();
    
    if ((digitalRead(fire) == HIGH)) { //Uruchamianie grzalki      //wstawic zabezpieczenie przed nadmiernym rozladowanie tu
      analogWrite(fire_pwm, pwm);      
    }
    else {                                              //Wylaczenie grzalki
      digitalWrite(fire_pwm, LOW);
    }
    
    if ((digitalRead(b_up) == HIGH) && (set_watts < max_watts) && (digitalRead(b_down) == LOW) && (set_watts < 25)) {    // Dodawanie Watow
      set_watts++;
      delay(50);
    }
    if ((digitalRead(b_down) == HIGH) && (set_watts > 0) && (digitalRead(b_up) == LOW)) {                                 // Odejmowanie Watow
      set_watts--;
      delay(50);
    }
       
    if (digitalRead(przerwanie) == HIGH) {                                                                                //przerywanie petli, zastapic cztero kilkiem
      lcd.clear();
      bck = 0;
      break;
    }

    lcd.setCursor(4, 0);lcd.print("W");    
    lcd.setCursor(0, 0);lcd.print(set_watts,0); 
    if((digitalRead(b_down) == HIGH) && (set_watts == 9)){
      lcd.clear();
    }
    if((digitalRead(b_down) == HIGH) && (set_watts == 99)){
      lcd.clear();
    }       
    lcd.setCursor(9, 1);lcd.write((uint8_t)5);   
    lcd.setCursor(10, 1);lcd.print("=");   
    lcd.setCursor(11, 1);lcd.print(coilr);   
    lcd.setCursor(9, 0);lcd.write((uint8_t)6);    
    lcd.setCursor(10, 0);lcd.print("=");    
    lcd.setCursor(11, 0);lcd.print(vbatt);    
    lcd.setCursor(15,0);lcd.print("V");
    
  }
}

void ByPass() {
  while (true) {
    zmienne();

    if ((digitalRead(fire) == HIGH) && (b1 > min_vbatt)) {
      digitalWrite(fire_pwm, HIGH);
    }
    else {
      digitalWrite(fire_pwm, LOW);
    }

    if (digitalRead(przerwanie) == HIGH) { //przerywanie petli, zastapic trzy kilkiem
      lcd.clear();
      bck = 0;
      break;
    }

    lcd.setCursor(1, 0);lcd.print(max_watts);    
    lcd.setCursor(5, 0);lcd.print("W");
    lcd.setCursor(9, 1);lcd.write((uint8_t)5);    
    lcd.setCursor(10, 1);lcd.print("=");   
    lcd.setCursor(11, 1);lcd.print(coilr);
    lcd.setCursor(9, 0);lcd.write((uint8_t)6);   
    lcd.setCursor(10, 0);lcd.print("=");   
    lcd.setCursor(11, 0);lcd.print(vbatt);
    lcd.setCursor(15,0);lcd.print("V");    
    lcd.setCursor(1,1);lcd.print(vape);  
  }
}

void ustawienia() {
  
  lcd.clear();

    while (true) {  
    lcd.setCursor(2, 0);lcd.print("Coil:");
    lcd.setCursor(10, 1);lcd.write((uint8_t)5);                      
    lcd.setCursor(6,1);lcd.print(coilr);      
    lcd.setCursor(4, 1);lcd.write((uint8_t)3);                  
    lcd.setCursor(11, 1);lcd.write((uint8_t)4);
    
           if(digitalRead(b_up) == HIGH && (digitalRead (b_down) == LOW)){     // zwiekszanie opornoscie
            coilr = coilr+0.01;
            delay(150);
           }
            
           
           if(digitalRead(b_down) == HIGH && (digitalRead (b_up) == LOW)){     //zmniejszanie opornosci
            coilr = coilr-0.01;
            delay(150);
           }
           
           if (digitalRead(przerwanie) == HIGH) {                              //przerywanie petli, zastapic trzy kilkiem
            lcd.clear();
            break;
            bck = 0;
          }                
  }
}
  
void loop() {
  zmienne();
  digitalWrite(fire, LOW);                                                                //zabezpieczenie przed staly wlaczeniem grzalki
    
  if ((digitalRead(b_up) == HIGH) && (i < 3) && (digitalRead(b_down) == LOW)) {           //zmiana trybów w prawo  
    blc = 1;
  }
  if ((digitalRead(b_up) == LOW) && (blc == 1)) {
    lcd.clear();
    i++;
    blc = 0;
  }
  if ((digitalRead(b_down) == HIGH) && (i > 0)) {                                         //zmiana trybow w lewo
    blc2 = 1;
  }
  if ((digitalRead(b_down) == LOW) && (blc2 == 1) && (digitalRead(b_up) == LOW)) {
    lcd.clear();
    i--;
    blc2 = 0;
  }
  
  if (i != 0) {                          // Wyswietlanie 
    lcd.setCursor(0, 0);
    lcd.write((uint8_t)3);
  }
  if (i != 3) {                          // strzalek
    lcd.setCursor(15, 0);
    lcd.write((uint8_t)4);
  }

  if (i == 0) {                          // tryb kontroli watow
    lcd.setCursor(2, 0);
    lcd.print("VW Mode");
    if ((digitalRead(fire) == HIGH) && (bck == 0)) {     // uruchamianie kontroli watow
      bck = 1;
    }
    if ((digitalRead(fire) == LOW) && (bck == 1)) {     // uruchamianie kontroli watow
      lcd.clear();
      VW();
    }
  }
  if (i == 1) {                          // tryb bypass
    lcd.setCursor(2, 0);
    lcd.print("ByPass Mode");
    if ((digitalRead(fire) == HIGH) && (bck == 0)) {     // uruchamianie kontroli watow
      bck = 1;
    }
    if ((digitalRead(fire) == LOW) && (bck == 1)) {     // uruchamianie kontroli watow
      lcd.clear();
      ByPass();
    }
  }
  if (i == 2) {                          // ustawienia                      
    lcd.setCursor(2, 0);
    lcd.print(" Coil ");
    if (digitalRead(fire) == HIGH) {     // wiecej ustawien
      lcd.clear();
      ustawienia();
    }    //bez przerwania
  }
  if (i == 3) {                          // informacje o systemie
    lcd.setCursor(2, 0);
    lcd.print("os Version");

    if (digitalRead(fire) == HIGH) {   // wiecej informacji
      lcd.clear();
      while (true) {
        lcd.setCursor(0, 0);
        lcd.print("   os 1.12b");               //example ;p
        if (digitalRead(przerwanie) == HIGH) {  //przerywanie petli, zastapic trzy kilkiem
          lcd.clear();
          break;
        }
      }    //koniec     //koniec     //koniec     //koniec     //koniec
    }
  }

}
