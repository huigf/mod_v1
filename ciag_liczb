#include <LiquidCrystal.h>
LiquidCrystal lcd(12, 11, 5 , 4, 3, 2);
int fire = 8;           //
int b_up = 7;           //   Przyciski
int b_down = 6;         //
int przerwanie = 9;

float b1 = 6.21;        //
float b2 = 6.20;        //   Bateria
float vbatt = 0;        //

float min_vbatt = 3.50; //   Napiecie odciecia grzalki

float coilr = 1.27;      // resystancja coila

int max_watts = 0;      //   max ilos watow
float set_watts = 0;    //   Regulacja Watow
//
boolean resistancelocked = false;
int prc = 0;            //
int pwm = 0;            //   Przeksztalcanie na pwm
#define fire_pwm 10     //                    


int i = 0;     //menu
int i2 = 0;    //menu w ustawienia
int blc = 0;   //menu
int blc2 = 0;  //wyborow

int n = 1;

int y = 10000;



byte lck[8] = {
  0b00000,
  0b01110,
  0b01010,
  0b01010,
  0b11111,
  0b11111,
  0b11111,
  0b11111
};
byte opn[8] = {
  0b00000,
  0b01110,
  0b01010,
  0b01000,
  0b11111,
  0b11111,
  0b11111,
  0b11111
};
byte Right[8] = {
  0b00000,
  0b01000,
  0b01100,
  0b01110,
  0b01110,
  0b01100,
  0b01000,
  0b00000
};
byte Left[8] = {
  0b00000,
  0b00010,
  0b00110,
  0b01110,
  0b01110,
  0b00110,
  0b00010,
  0b00000
};
byte ohm[8] = {
  0b00000,
  0b01110,
  0b10001,
  0b10001,
  0b10001,
  0b01010,
  0b11011,
  0b00000
};


void setup() {                    // setup
  lcd.begin(16, 2);
  lcd.createChar(1, lck);
  lcd.createChar(2, opn);
  lcd.createChar(3, Left);
  lcd.createChar(4, Right);
  lcd.createChar(5, ohm);
  lcd.clear();
  pinMode(fire_pwm, OUTPUT);
  pinMode(fire, INPUT);
  pinMode(b_up, INPUT);
  pinMode(b_down, INPUT);
  lcd.setCursor(0, 0);
  pinMode(przerwanie, INPUT);
}

// to do here lelelelele
//  - zapis rezystancji do EEPROM
//  - blokada rezystancji ON OFF + lock .io
//
//
// Pomiar napiecia baterii, grzalki

void zmienne() {
  int sensorValue1 = analogRead(A0);
  //float b1 = sensorValue1 * (5.0 / 1023.0);

  int sensorValue2 = analogRead(A1);
  //float b2 = sensorValue2 * (5.0 / 1023.0);
  vbatt = b1 + b2;

  max_watts = vbatt * vbatt / coilr;
  prc = set_watts / (max_watts / 100);
  pwm = prc * 2.55;
  if (resistancelocked == false) {
    //coilr=  //pomiar rezystancji grzalki
  }
}


 /*  bld = rpm*
   80 rpm = 125   ms.delay
   
   40 rpm = 250    ms.delay

   20 rpm = 500    ms.delay
   
   10 rpm = 1000   ms.delay

   5 rpm 2000      ms.delay
   
   1 rpm 10000     ms.delay 

   x = 5;

   a
   
   
    
    bld = 
    //*/
  

void WattageControl() {
  while (true) {
    zmienne();
    if ((digitalRead(fire) == HIGH) && (b1 > min_vbatt) && (b2 > min_vbatt)) { //Uruchamianie grzalki
      analogWrite(fire_pwm, pwm);
    }
    else {
      digitalWrite(fire_pwm, LOW);
    }

    if ((digitalRead(b_up) == HIGH) && (set_watts < max_watts) && (digitalRead(b_down) == LOW)) {    //Ustawianie watów
      set_watts++;
      delay(20);
    }
    if ((digitalRead(b_down) == HIGH) && (set_watts > 0) && (digitalRead(b_up) == LOW)) {
      set_watts--;
      delay(20);
    }

    if (digitalRead(przerwanie) == HIGH) { //przerywanie petli, zastapic trzy kilkiem
      lcd.clear();
      break;
    }

    if (max_watts < set_watts) {
      set_watts--;
    }
    lcd.setCursor(7, 2);
    lcd.print("Watts");
    lcd.setCursor(0, 0);
    lcd.print(max_watts);
    lcd.setCursor(0, 2);
    lcd.print(set_watts);
  }
}

void ByPass() {
  while (true) {
    if ((digitalRead(fire) == HIGH) && (b1 > min_vbatt) && (b2 > min_vbatt)) {
      digitalWrite(fire_pwm, HIGH);
    }
    else {
      digitalWrite(fire_pwm, LOW);
    }
    if (digitalRead(przerwanie) == HIGH) { //przerywanie petli, zastapic trzy kilkiem
      lcd.clear();
      break;
    }
    vbatt = b1 + b2;
    max_watts = vbatt * vbatt / coilr;
    lcd.setCursor(0, 0);
    lcd.print(max_watts);
    lcd.setCursor(4, 0);
    lcd.print("Watts");

    lcd.setCursor(0, 1);
    lcd.print(millis());
  }
}

void ustawienia() {
  lcd.clear();
  while (true) {

    if(digitalRead(b_up) == HIGH){
      n++;
      delay(20);
    }
    if(digitalRead(b_down) == HIGH && (n > 5)){
      n--;
      delay(20);
    }
    lcd.setCursor(0,0);
    lcd.print("RPM:");
    lcd.setCursor(5,0);
    lcd.print(n);

    lcd.setCursor(0,1);
    lcd.print("y =");
    lcd.setCursor(5,1);
    lcd.print(y);

    y = 10000/n;

    
    if (digitalRead(przerwanie) == HIGH) {                                               //przerywanie petli, zastapic trzy kilkiem
      lcd.clear();
      break;
    }

    if (digitalRead(b_down) == HIGH && (n == 9)) {
      lcd.clear();
    }
    if (digitalRead(b_down) == HIGH && (n == 99)) {
      lcd.clear();
    }
    if (digitalRead(b_down) == HIGH && (n == 999)) {
      lcd.clear();
    }
    if (digitalRead(b_down) == HIGH && (n == 9999)) {
      lcd.clear();
    }



  }
}

void loop() {
  zmienne();
  if ((digitalRead(b_up) == HIGH) && (i < 3) && (digitalRead(b_down) == LOW)) {      //zmiana trybów w prawo, ilos opcji menu
    blc = 1;
  }
  if ((digitalRead(b_up) == LOW) && (blc == 1)) {
    lcd.clear();
    i++;
    blc = 0;
  }
  if ((digitalRead(b_down) == HIGH) && (i > 0)) {                                    //zmiana trybow w lewo
    blc2 = 1;
  }
  if ((digitalRead(b_down) == LOW) && (blc2 == 1) && (digitalRead(b_up) == LOW)) {
    lcd.clear();
    i--;
    blc2 = 0;
  }
  //  Wyswietlanie strzalek
  if (i != 0) {
    lcd.setCursor(0, 0);
    lcd.write((uint8_t)3);
  }
  if (i != 3) {
    lcd.setCursor(15, 0);
    lcd.write((uint8_t)4);
  }

  if (i == 0) {                          // tryb kontroli watow
    lcd.setCursor(1, 0);
    lcd.print("Kontrola watow");
    if (digitalRead(fire) == HIGH) {     // uruchamianie kontroli watow
      lcd.clear();
      WattageControl();
    }
  }
  if (i == 1) {                          // tryb bypass
    lcd.setCursor(2, 0);
    lcd.print("Tryb ByPass");
    if (digitalRead(fire) == HIGH) {     // uruchamianie ByPassu
      lcd.clear();
      ByPass();
    }
  }
  if (i == 2) {                          // Informacje o systemie
    lcd.setCursor(1, 0);
    lcd.print("Wersja systemu");

    if (digitalRead(fire) == HIGH) {   // wiecej informacji
      lcd.clear();
      while (true) {
        lcd.setCursor(0, 0);
        lcd.print("os 1.10b");       //example ;p
        if (digitalRead(przerwanie) == HIGH) {  //przerywanie petli, zastapic trzy kilkiem
          lcd.clear();
          break;
        }
      }    //koniec     //koniec     //koniec     //koniec     //koniec
    }
  }
  if (i == 3) {                          // Ustawienia
    lcd.setCursor(2, 0);
    lcd.print("Silnik BLDC");
    lcd.setCursor(0, 2);
    lcd.print("Ustawienie RPM");
    if (digitalRead(fire) == HIGH) {     // wiecej ustawien
      lcd.clear();
      ustawienia();
    }
  }
  if (i == 5) {                          // tu... tu? tu nic nie ma. kompletnie nic. nie rozwijaj tego. przeciez nic tam nie ma.
    lcd.setCursor(1, 0);
    lcd.print("Test millis();");
    lcd.setCursor(0, 2);
    lcd.print("Kliknij tutaj");
    if (digitalRead(fire) == HIGH) {     // wiecej ustawien
      lcd.clear();
    }    //bez przerwania
  }
  if (i == 4) {                          // PROJEKT NA FIZYKE - SILNIK BEZCZOTKOWY BLDC
    lcd.setCursor(1, 0);
    lcd.print(" Silnik BLDC");
    lcd.setCursor(0, 2);
    lcd.print("  [ Start ]");
    if (digitalRead(fire) == HIGH) {     // wiecej ustawien
      lcd.clear();
    }    //bez przerwania
  }
}
